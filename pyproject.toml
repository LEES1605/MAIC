[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "maic"
version = "1.0.0"
description = "My AI Teacher - SSOT 기반의 AI 교육 플랫폼"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "LEES1605", email = "your-email@example.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Education",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.11,<4.0"
dependencies = [
    # Core dependencies
    "streamlit>=1.28.0",
    "pydantic>=2.0.0",
    
    # LLM & AI
    "openai>=1.0.0",
    "google-generativeai>=0.7.2",
    
    # Data processing
    "PyYAML>=6.0.1,<7",
    "requests>=2.31.0",
    
    # Utilities
    "psutil>=5.9.0",
    
    # Optional dependencies for enhanced functionality
    "pillow>=10.0.0",
    "numpy>=1.24.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7,<9",
    "pytest-cov>=4,<6",
    "ruff>=0.5",
    "mypy>=1.10",
    "bandit>=1.7",
]
test = [
    "pytest>=7,<9",
    "pytest-cov>=4,<6",
    "playwright>=1.40.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
]

[project.urls]
Homepage = "https://github.com/LEES1605/MAIC"
Repository = "https://github.com/LEES1605/MAIC.git"
Issues = "https://github.com/LEES1605/MAIC/issues"
Documentation = "https://github.com/LEES1605/MAIC#readme"

[project.scripts]
maic = "app:main"
maic-start = "tools.start_work:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.md"]

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = ["B011"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "streamlit.*",
    "google.generativeai.*",
    "openai.*",
    "yaml.*",
    "requests.*",
    "psutil.*",
    "PIL.*",
    "numpy.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
