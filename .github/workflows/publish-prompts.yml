name: Publish Prompts

on:
  workflow_dispatch:
    inputs:
      prompts_yaml:
        description: "Prompts YAML (persona + modes)"
        required: false
  repository_dispatch:
    types: [publish-prompts]

permissions:
  contents: write

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolve prompts.yaml (inputs or client_payload)
        env:
          INP: ${{ github.event.inputs.prompts_yaml }}
          PAY: ${{ github.event.client_payload.prompts_yaml }}
        shell: bash
        run: |
          set -euo pipefail
          INPUT="${INP:-}"
          if [ -z "$INPUT" ]; then INPUT="${PAY:-}"; fi
          if [ -z "$INPUT" ]; then
            echo "Error:  No prompts_yaml provided."
            exit 1
          fi
          printf '%s\n' "$INPUT" > prompts.yaml
          echo "Wrote prompts.yaml ($(wc -c < prompts.yaml) bytes)"

      - name: Validate schema (strict)
        shell: bash
        run: |
          set -euo pipefail
          python3 - <<'PY'
          import sys, yaml, io
          y = yaml.safe_load(io.open("prompts.yaml","r",encoding="utf-8")) or {}
          errs=[]
          if "version" not in y: errs.append("'version' is required")
          modes = y.get("modes")
          if not isinstance(modes, dict):
              errs.append("'modes' must be a mapping")
          else:
              for k in ("grammar","sentence","passage"):
                  v = modes.get(k)
                  if not isinstance(v, str) or not v.strip():
                      errs.append(f"'modes.{k}' must be a non-empty string")
              extras=[k for k in modes if k not in ("grammar","sentence","passage")]
              if extras: errs.append(f"extra keys in 'modes': {extras}")
          if errs:
              print("\n".join(f"[schema] {e}" for e in errs))
              sys.exit(1)
          print("schema ok")
          PY

      - name: Ensure release & upload asset
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          TAG="prompts-latest"
          NOTE="Automated publish from admin panel"
          if ! gh release view "$TAG" >/dev/null 2>&1; then
            gh release create "$TAG" --notes "$NOTE"
          fi
          gh release upload "$TAG" prompts.yaml --clobber
          echo "uploaded"
