# ===== START [01] .github/workflows/apply-patch.yml =====
name: Apply Patch ➜ Create PR

on:
  workflow_dispatch:
    inputs:
      patch:
        description: '여기에 패치(diff) 텍스트를 그대로 붙여넣으세요. (Codex "git 적용복사"/"패치 복사")  *대용량이면 patch_url 사용 권장*'
        required: false
        type: string
      patch_url:
        description: '옵션: .patch/.diff RAW URL (예: gist/raw). 지정 시 patch 입력보다 우선함.'
        required: false
        type: string
      base_branch:
        description: '패치를 적용할 기준 브랜치'
        required: true
        default: 'main'
        type: string
      new_branch:
        description: '새로 만들 작업 브랜치명(비우면 자동 생성)'
        required: false
        type: string
      commit_message:
        description: '커밋 메시지'
        required: false
        default: 'Apply patch via workflow'
        type: string
      pr_title:
        description: 'PR 제목'
        required: false
        default: 'Apply patch via workflow'
        type: string
      pr_body:
        description: 'PR 본문(노트)'
        required: false
        default: |
          This PR was automatically created by apply-patch.yml.
        type: string
      labels:
        description: '라벨(쉼표 구분, 예: patch,auto)'
        required: false
        type: string
      reviewers:
        description: '리뷰어(쉼표 구분 GitHub ID)'
        required: false
        type: string

# PR 생성을 위해 최소 권한만 부여
permissions:
  contents: write        # 브랜치 푸시/커밋
  pull-requests: write   # PR 생성/업데이트
  actions: read

jobs:
  apply-and-pr:
    name: Apply patch and open PR
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout (full history for 3-way)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve base & new branch names
        id: names
        shell: bash
        run: |
          set -euo pipefail
          BASE="${{ inputs.base_branch }}"
          if [ -z "${{ inputs.new_branch }}" ]; then
            DATE="$(date +'%Y%m%d-%H%M%S')"
            NEW="patch/codex-${DATE}-${GITHUB_RUN_ID}"
          else
            NEW="${{ inputs.new_branch }}"
          fi
          echo "BASE=$BASE" >> "$GITHUB_ENV"
          echo "NEW=$NEW" >> "$GITHUB_ENV"
          echo "Base branch: $BASE"
          echo "New branch:  $NEW"

      - name: Prepare patch file (from URL or inline)
        id: patch
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${{ inputs.patch_url }}" ]; then
            echo "Downloading patch from URL..."
            curl -sS -L --fail "${{ inputs.patch_url }}" -o codex.patch
          elif [ -n "${{ inputs.patch }}" ]; then
            echo "Writing inline patch to file..."
            # Heredoc으로 줄바꿈/특수문자 안전하게 보존
            cat > codex.patch <<'PATCH_EOF'
            ${{ inputs.patch }}
            PATCH_EOF
          else
            echo "::error title=No patch provided::Either patch_url or patch must be provided."
            exit 1
          fi
          echo "----- Patch head (up to 40 lines) -----"
          head -n 40 codex.patch || true
          echo "---------------------------------------"
          # 비어있는지 검사
          if [ ! -s codex.patch ]; then
            echo "::error title=Empty patch::The patch file is empty."
            exit 1
          fi

      - name: Create work branch from base
        shell: bash
        run: |
          set -euo pipefail
          git fetch origin "${BASE}"
          git switch -c "${NEW}" "origin/${BASE}"

      - name: Preflight - find proper -p (strip) & check applicability
        id: preflight
        shell: bash
        run: |
          set -euo pipefail
          # -p0 → -p1 → -p2 순서로 --3way --check 시도
          for P in 0 1 2; do
            if git apply --check --3way -p${P} codex.patch 2>apply_check_${P}.log; then
              echo "PSTRIP=${P}" >> "$GITHUB_ENV"
              echo "Detected strip level: -p${P}"
              break
            else
              echo "Try -p${P} failed:"
              cat apply_check_${P}.log || true
              echo "----"
            fi
          done
          if ! grep -q '^PSTRIP=' "$GITHUB_ENV"; then
            echo "::error title=Patch does not apply::Tried -p0/-p1/-p2 with --3way --check; all failed. See logs above."
            exit 1
          fi

      - name: Apply patch (3-way, index, whitespace fix)
        shell: bash
        run: |
          set -euo pipefail
          echo "Applying with -p${PSTRIP} ..."
          git apply --3way --index --whitespace=fix -p${PSTRIP} codex.patch
          # 변경이 실제로 staged 되었는지 확인
          if git diff --cached --quiet; then
            echo "::error title=No changes staged::Patch applied but no effective changes were staged. Possibly already applied?"
            exit 1
          fi

      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.NEW }}                # 새 브랜치로 커밋/푸시
          base: ${{ env.BASE }}                 # 기준 브랜치
          commit-message: ${{ inputs.commit_message }}
          title: ${{ inputs.pr_title }}
          # PR 본문에 실행 메타데이터를 덧붙여 감사(추적) 용이
          body: |
            ${{ inputs.pr_body }}

            ---
            **Auto-generated by**: `.github/workflows/apply-patch.yml`  
            **Base**: `${{ env.BASE }}`  
            **New branch**: `${{ env.NEW }}`  
            **Strip level**: `-p${{ env.PSTRIP }}`  
            **Run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          labels: ${{ inputs.labels }}
          reviewers: ${{ inputs.reviewers }}
          signoff: true
          draft: false

      - name: Show PR URL
        if: steps.cpr.outputs.pull-request-url != ''
        run: |
          echo "Pull Request: ${{ steps.cpr.outputs.pull-request-url }}"

      - name: Upload patch artifact (on failure for debugging)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: failed-patch-and-logs
          path: |
            codex.patch
            apply_check_*.log
# ===== END [01] .github/workflows/apply-patch.yml =====
