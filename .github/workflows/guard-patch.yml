# ========================== [01] 워크플로 메타 — START ==========================
name: CI • Patch Guard
# PR에서만 실행 (push에서는 절대 동작하지 않음)
on:
  pull_request:
    types: [opened, reopened, synchronize, edited, ready_for_review]
permissions:
  contents: read
  pull-requests: read
# ========================== [01] 워크플로 메타 — END ============================

# ========================== [02] Patch Guard 잡 — START ========================
jobs:
  patch-guard:
    # 안전장치: 혹시라도 push로 트리거되면 스킵
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest

    steps:
      - name: 🧰 Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: 📦 Install deps
        run: python -m pip install --upgrade pip pyyaml

      - name: 🔎 Run Patch Guard
        env:
          PR_BODY: ${{ github.event.pull_request.body }}
          BASE_REF: ${{ github.event.pull_request.base.ref }}
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PYCODE'
          # =================== [03] Guard Script — START ===================
          import os, re, sys, hashlib, subprocess, pathlib, textwrap
          try:
              import yaml  # type: ignore
          except Exception:
              print("::error::pyyaml not available")
              sys.exit(1)

          BASE_REF = os.environ.get("BASE_REF", "main")
          PR_BODY  = os.environ.get("PR_BODY", "") or ""
          CFG_PATH = ".ci/patch-guard.yml"

          def load_cfg():
              # 1) 리포 파일 우선
              if pathlib.Path(CFG_PATH).exists():
                  with open(CFG_PATH, "r", encoding="utf-8") as f:
                      return yaml.safe_load(f) or {}
              # 2) PR 본문 HTML 주석 블록에서 로드
              m = re.search(r"<!--\\s*PATCH-GUARD\\s*(.*?)-->", PR_BODY, re.S | re.I)
              if not m:
                  print("::error::.ci/patch-guard.yml 또는 PR 본문의 <!-- PATCH-GUARD ... --> 블록이 필요합니다.")
                  sys.exit(1)
              try:
                  return yaml.safe_load(m.group(1)) or {}
              except Exception as e:
                  print(f"::error::PR 본문 PATCH-GUARD YAML 파싱 실패: {e}")
                  sys.exit(1)

          def git_show_base(path: str) -> bytes:
              # base 브랜치 최신 상태 확보 후, 파일 바이트 리턴
              subprocess.run(["git", "fetch", "origin", BASE_REF], check=False, capture_output=True)
              r = subprocess.run(["git","show", f"origin/{BASE_REF}:{path}"], capture_output=True)
              if r.returncode != 0:
                  raise FileNotFoundError(f"origin/{BASE_REF}:{path} not found")
              return r.stdout

          cfg = load_cfg()
          files = cfg.get("files", [])
          if not isinstance(files, list) or not files:
              print("::error::PATCH-GUARD 설정에 files 리스트가 없습니다.")
              sys.exit(1)

          errors = []
          for i, item in enumerate(files, 1):
              path = str(item.get("path") or "").strip()
              exp_sha = str(item.get("sha256") or "").strip()
              anchors = item.get("anchors") or []
              if not path:
                  errors.append(f"[item {i}] path 누락")
                  continue
              try:
                  data = git_show_base(path)
              except Exception:
                  errors.append(f"{path}: origin/{BASE_REF}에서 파일을 찾을 수 없음")
                  continue

              sha = hashlib.sha256(data).hexdigest()
              if exp_sha and sha != exp_sha:
                  errors.append(f"{path}: sha256 불일치 (expected={exp_sha}, got={sha})")

              text = ""
              try:
                  text = data.decode("utf-8", "ignore")
              except Exception:
                  pass

              for a in anchors:
                  if isinstance(a, str) and a.startswith("re:"):
                      pat = a[3:]
                      if not re.search(pat, text, re.S):
                          errors.append(f"{path}: anchor regex 미존재: {pat}")
                  else:
                      s = str(a)
                      if s and s not in text:
                          errors.append(f"{path}: anchor 문자열 미존재: {s}")

          if errors:
              print("::error::Patch Guard 실패:\\n- " + "\\n- ".join(errors))
              sys.exit(1)
          print("Patch Guard OK")
          # =================== [03] Guard Script — END =====================
          PYCODE
# ========================== [02] Patch Guard 잡 — END ==========================
