# [01] START: .github/workflows/pr-title.yml
name: CI • PR Title (Conventional, auto-fix)

on:
  pull_request_target:
    types: [opened, edited, synchronize, reopened]
  workflow_dispatch:
    inputs:
      pr:
        description: 'PR number to autofix (optional)'
        required: false
        type: string

permissions:
  contents: read
  pull-requests: write
  statuses: write

jobs:
  pr-title:
    runs-on: ubuntu-latest

    steps:
      - name: Autofix PR title (PR events)
        if: ${{ github.event_name == 'pull_request_target' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            if (!pr) { core.info("No PR context."); return; }
            const original = pr.title || "";

            // 1) Patch/패치 N → chore(patch-N): subj
            const rules = [
              [/^patch\s*[-\s]?(\d+)\s*[:\-]?\s*(.*)$/i, (m) => `chore(patch-${m[1]}): ${(m[2]||'').trim() || 'maintenance'}`],
              [/^패치\s*[-\s]?(\d+)\s*[:\-]?\s*(.*)$/i, (m) => `chore(patch-${m[1]}): ${(m[2]||'').trim() || '유지보수'}`],
              // 2) 흔한 "Update ..." → chore: update ...
              [/^update\s+(.+)$/i, (m) => `chore: update ${m[1].trim()}`],
            ];

            let fixed = null;
            for (const [rx, fmt] of rules) {
              const m = original.match(rx);
              if (m) { fixed = fmt(m); break; }
            }

            core.info(`title(before)="${original}"`);
            if (fixed && fixed !== original) {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                title: fixed
              });
              core.info(`title(after)="${fixed}"`);
            } else {
              core.info("no change");
            }

      - name: Autofix by PR number (manual run)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.pr != '' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const n = Number(core.getInput('pr'));
            if (!n) { core.setFailed('invalid PR number'); return; }
            const pr = (await github.rest.pulls.get({
              owner: context.repo.owner, repo: context.repo.repo, pull_number: n
            })).data;

            const original = pr.title || "";
            const rules = [
              [/^patch\s*[-\s]?(\d+)\s*[:\-]?\s*(.*)$/i, (m) => `chore(patch-${m[1]}): ${(m[2]||'').trim() || 'maintenance'}`],
              [/^패치\s*[-\s]?(\d+)\s*[:\-]?\s*(.*)$/i, (m) => `chore(patch-${m[1]}): ${(m[2]||'').trim() || '유지보수'}`],
              [/^update\s+(.+)$/i, (m) => `chore: update ${m[1].trim()}`],
            ];

            let fixed = null;
            for (const [rx, fmt] of rules) {
              const m = original.match(rx);
              if (m) { fixed = fmt(m); break; }
            }

            core.info(`title(before)="${original}"`);
            if (fixed && fixed !== original) {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: n,
                title: fixed
              });
              core.info(`title(after)="${fixed}"`);
            } else {
              core.info("no change");
            }

      - name: Done
        run: echo "Autofix only; no failing validation."
# [01] END: .github/workflows/pr-title.yml
