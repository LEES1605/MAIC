name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest

    outputs:
      ui:      ${{ steps.filter.outputs.ui }}
      tests:   ${{ steps.filter.outputs.tests }}
      scripts: ${{ steps.filter.outputs.scripts }}
      docs:    ${{ steps.filter.outputs.docs }}
      ci:      ${{ steps.filter.outputs.ci }}

    steps:
      # 1) 전체 이력으로 체크아웃 (merge-base/PR ref 탐색용)
      - name: Checkout full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # PR이면 head SHA, 아니면 현재 SHA
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      # 2) 일부 러너에서 필요한 git safe.directory
      - name: Mark workspace as safe
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      # 3) 이벤트별 base/ref 계산 + 필요한 원격 ref 확보
      - name: Compute base/ref for paths-filter
        id: refs
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
            echo "BASE=${{ github.event.pull_request.base.sha }}" >> "$GITHUB_OUTPUT"
            echo "REF=${{ github.event.pull_request.head.sha }}" >> "$GITHUB_OUTPUT"
          elif [[ "${GITHUB_EVENT_NAME}" == "push" ]]; then
            if [[ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]]; then
              echo "BASE=${{ github.event.before }}" >> "$GITHUB_OUTPUT"
            else
              # 새 브랜치 첫 커밋 등 before가 all-zero이면 현재 브랜치를 base로
              echo "BASE=origin/${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
            fi
            echo "REF=${{ github.sha }}" >> "$GITHUB_OUTPUT"
          else
            # workflow_dispatch / schedule 등
            echo "BASE=origin/main" >> "$GITHUB_OUTPUT"
            echo "REF=${{ github.sha }}" >> "$GITHUB_OUTPUT"
          fi
          # 원격 heads 및 PR refs 확보 (fork PR 포함)
          git fetch --no-tags --prune --depth=0 origin \
            "+refs/heads/*:refs/remotes/origin/*" \
            "+refs/pull/*:refs/remotes/pull/*"

      # 4) 변경 파일 필터링
      - name: Paths filter
        id: filter
        uses: dorny/paths-filter@v3
        with:
          base: ${{ steps.refs.outputs.BASE }}
          ref:  ${{ steps.refs.outputs.REF }}
          list-files: shell
          filters: |
            ui:
              - 'src/ui/**'
            tests:
              - 'tests/**'
            scripts:
              - 'scripts/**'
            docs:
              - 'docs/**'
            ci:
              - '.github/workflows/**'

      # (선택) 디버그: 필요 시 주석 해제
      # - name: Debug git state
      #   if: always()
      #   run: |
      #     git log -1 --oneline
      #     echo "BASE=${{ steps.refs.outputs.BASE }}"
      #     echo "REF=${{ steps.refs.outputs.REF }}"
      #     git merge-base ${{ steps.refs.outputs.BASE }} ${{ steps.refs.outputs.REF }}

  # 예시) 이후 잡에서 변경 영역에 따라 조건 실행
  # ruff:
  #   runs-on: ubuntu-latest
  #   needs: changes
  #   if: needs.changes.outputs.ui == 'true' || needs.changes.outputs.scripts == 'true'
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: chartboost/ruff-action@v1
  #
  # tests:
  #   runs-on: ubuntu-latest
  #   needs: changes
  #   if: needs.changes.outputs.tests == 'true' || needs.changes.outputs.ui == 'true'
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.11'
  #     - run: pip install -r requirements.txt
  #     - run: pytest -q
