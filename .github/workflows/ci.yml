# ===== [00] WORKFLOW META ====================================================  # [00] START
name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true
# [00] END

# ============================ [01] MAIN CI (ruff/mypy/pytest) — START ============================
name: CI

on:
  push:
    branches: ["**"]
  pull_request:

permissions:
  contents: read

jobs:
  checks:
    name: Lint • Typecheck • Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.12"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Upgrade pip/setuptools/wheel
        run: python -m pip install -U pip setuptools wheel

      # 선택적 런타임 의존성 설치: requirements.txt가 있으면 설치
      - name: Install runtime requirements (optional)
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      # 개발 도구 설치 (ruff/mypy/pytest)
      - name: Install dev tools
        run: pip install ruff mypy pytest

      - name: Ruff
        run: ruff check .

      - name: mypy
        run: mypy .

      # 핵심 수정: PYTHONPATH에 repo 루트를 추가해 src 패키지를 인식시킴
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> "$GITHUB_ENV"

      - name: Pytest
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: pytest -q
# ============================= [01] MAIN CI (ruff/mypy/pytest) — END =============================

# ===== [02] CHECKOUT & PYTHON SETUP ========================================= # [02] START
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Check import paths
        run: bash scripts/check_import_paths.sh

# [02] END

# ===== [03] CACHE & INSTALL DEPENDENCIES ==================================== # [03] START
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Upgrade pip & wheel
        run: |
          python -m pip install -U pip wheel

      - name: Install project requirements (if present)
        if: hashFiles('requirements.txt') != ''
        run: |
          pip install -r requirements.txt

      - name: Install dev tools (ruff / mypy / pytest)
        run: |
          pip install -U ruff mypy pytest pytest-cov
# [03] END

# ===== [04] RUFF — LINT & FORMAT (AUTO-FIX) ================================= # [04] START
      - name: Ruff — Lint (auto-fix + GitHub annotations)
        run: |
          ruff --version
          # 1) 자동수정 가능한 항목은 먼저 고치고
          ruff check . --fix
          # 2) 남은 문제는 GitHub 주석(Annotations)으로 상세 표시
          #    (Ruff 0.12.x는 --show-source 미지원 → 제거)
          ruff check . --output-format=github --show-fixes --show-files
# [04] END

# ===== [05] TYPE CHECK — STRICT (MANDATORY) ================================= # [05] START
      - name: mypy — strict gate (must pass)
        run: |
          mypy --version
          # mypy.ini에 따라 전역은 완화, src/*는 점진 엄격.
          # 실패 시 CI가 실패합니다.
          mypy .
# [05] END

# ===== [06] TESTS (ONLY IF TESTS EXIST) ===================================== # [06] START
      - name: pytest (if tests exist)
        if: hashFiles('tests/**/*.py') != ''
        run: |
          pytest -q --maxfail=1 --disable-warnings
# [06] END
