# ===== [01] GLOBAL (baseline, relaxed) =======================================  # [01] START
[mypy]
python_version = 3.11

# --- Keep useful warnings (signal without breaking CI) ---
warn_unused_configs = True
warn_redundant_casts = True
warn_unused_ignores = True
pretty = True
show_error_codes = True

# --- Progressive strictness: relax globally, strengthen per-package later ---
# (Prev: disallow_untyped_defs = True  -> caused many failures on app.py, etc.)
disallow_untyped_defs = False

# Keep optional handling strict to avoid silent None bugs
strict_optional = True
no_implicit_optional = True
# [01] END

# ===== [02] PER-MODULE: external libs (stubs missing) =======================  # [02] START
[mypy-streamlit.*]
ignore_missing_imports = True

[mypy-llama_index.*]
ignore_missing_imports = True

[mypy-google.*]
ignore_missing_imports = True
# [02] END

# ===== [03] PROGRESSIVE STRICTNESS: our library code ========================  # [03] START
# Start with deeper checking without forcing annotations yet.
# Later we can flip on disallow_untyped_defs=True here module-by-module.
[mypy-src.*]
# Analyze bodies of untyped defs to surface real issues early
check_untyped_defs = True

# Keep these strict to prevent Optional-related footguns in src/*
strict_optional = True
no_implicit_optional = True

# Useful warnings in our code
warn_unused_configs = True
warn_redundant_casts = True
warn_unused_ignores = True

# NOTE:
# - We intentionally DO NOT set disallow_untyped_defs=True here yet.
#   After CI is green and as we annotate modules, we will enable it
#   per-module (e.g., [mypy-src.rag_engine], [mypy-src.rag.index_build]) and expand.
# [03] END
